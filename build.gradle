
plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.github.node-gradle.node' version '3.1.0'
	id 'org.barfuin.gradle.taskinfo' version '1.0.1'
	id 'com.google.cloud.tools.jib' version '3.1.4'
	id 'java'
}

group = 'io.confluent.demo'
version = '0.0.45'

repositories {
	mavenCentral()
	maven {
		url "https://ksqldb-maven.s3.amazonaws.com/maven/"
	}
	maven {
		url "https://jenkins-confluent-packages-beta-maven.s3.amazonaws.com/7.0.0-beta210811194853/1/maven/"
	}
}
dependencies {
	implementation 'io.swagger.core.v3:swagger-annotations:2.0.0'
	implementation 'com.google.code.gson:gson:2.8.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.webjars:stomp-websocket:2.3.4'
	implementation 'org.webjars:bootstrap:3.3.7'
	implementation 'org.webjars:jquery:3.1.1-1'
	implementation 'org.threeten:threetenbp:1.5.0'
	implementation 'org.javatuples:javatuples:1.2'
	implementation 'com.typesafe:config:1.4.1'
	def noLog = {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	implementation 'io.confluent.ksql:ksqldb-api-client:0.21.0', noLog
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

node {
	nodeProjectDir = file("${project.projectDir}/client")
}

yarn_build {
	dependsOn('yarn_install')
	inputs.files fileTree("${project.projectDir}/client")
}

processResources {
	dependsOn('yarn_build')
	from("${project.buildDir}/generated/static") {into('static') }
}

jib {
  container.mainClass = "io.confluent.demo.datamesh.DataMeshDemo"
  to {
	  image = 'cnfldemos/data-mesh-demo'
	  tags = ["${version}"]
  }
  extraDirectories {
	  paths {
		  path {
			  from = file('scripts')
			  into = '/scripts'
		  }
		  permissions = [
		  	'/scripts/*.sh': '755'
		  ]
	  }
  }
}

test {
	useJUnitPlatform()
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

bootRun {
	if (project.hasProperty('args')) {
		args project.args.split(',')
	}
}
