/*
 * Confluent Data Catalog
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.confluent.demo.datamesh.cc.datacatalog.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AtlasTermAssignmentHeader
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-05T12:27:07.994303-05:00[America/Chicago]")
public class AtlasTermAssignmentHeader {
  @SerializedName("termGuid")
  private String termGuid = null;

  @SerializedName("relationGuid")
  private String relationGuid = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("displayText")
  private String displayText = null;

  @SerializedName("expression")
  private String expression = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("steward")
  private String steward = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("confidence")
  private Integer confidence = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DISCOVERED("DISCOVERED"),
    PROPOSED("PROPOSED"),
    IMPORTED("IMPORTED"),
    VALIDATED("VALIDATED"),
    DEPRECATED("DEPRECATED"),
    OBSOLETE("OBSOLETE"),
    OTHER("OTHER");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public AtlasTermAssignmentHeader termGuid(String termGuid) {
    this.termGuid = termGuid;
    return this;
  }

   /**
   * Get termGuid
   * @return termGuid
  **/
  @Schema(description = "")
  public String getTermGuid() {
    return termGuid;
  }

  public void setTermGuid(String termGuid) {
    this.termGuid = termGuid;
  }

  public AtlasTermAssignmentHeader relationGuid(String relationGuid) {
    this.relationGuid = relationGuid;
    return this;
  }

   /**
   * Get relationGuid
   * @return relationGuid
  **/
  @Schema(description = "")
  public String getRelationGuid() {
    return relationGuid;
  }

  public void setRelationGuid(String relationGuid) {
    this.relationGuid = relationGuid;
  }

  public AtlasTermAssignmentHeader description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public AtlasTermAssignmentHeader displayText(String displayText) {
    this.displayText = displayText;
    return this;
  }

   /**
   * Get displayText
   * @return displayText
  **/
  @Schema(description = "")
  public String getDisplayText() {
    return displayText;
  }

  public void setDisplayText(String displayText) {
    this.displayText = displayText;
  }

  public AtlasTermAssignmentHeader expression(String expression) {
    this.expression = expression;
    return this;
  }

   /**
   * Get expression
   * @return expression
  **/
  @Schema(description = "")
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }

  public AtlasTermAssignmentHeader createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public AtlasTermAssignmentHeader steward(String steward) {
    this.steward = steward;
    return this;
  }

   /**
   * Get steward
   * @return steward
  **/
  @Schema(description = "")
  public String getSteward() {
    return steward;
  }

  public void setSteward(String steward) {
    this.steward = steward;
  }

  public AtlasTermAssignmentHeader source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public AtlasTermAssignmentHeader confidence(Integer confidence) {
    this.confidence = confidence;
    return this;
  }

   /**
   * Get confidence
   * @return confidence
  **/
  @Schema(description = "")
  public Integer getConfidence() {
    return confidence;
  }

  public void setConfidence(Integer confidence) {
    this.confidence = confidence;
  }

  public AtlasTermAssignmentHeader status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtlasTermAssignmentHeader atlasTermAssignmentHeader = (AtlasTermAssignmentHeader) o;
    return Objects.equals(this.termGuid, atlasTermAssignmentHeader.termGuid) &&
        Objects.equals(this.relationGuid, atlasTermAssignmentHeader.relationGuid) &&
        Objects.equals(this.description, atlasTermAssignmentHeader.description) &&
        Objects.equals(this.displayText, atlasTermAssignmentHeader.displayText) &&
        Objects.equals(this.expression, atlasTermAssignmentHeader.expression) &&
        Objects.equals(this.createdBy, atlasTermAssignmentHeader.createdBy) &&
        Objects.equals(this.steward, atlasTermAssignmentHeader.steward) &&
        Objects.equals(this.source, atlasTermAssignmentHeader.source) &&
        Objects.equals(this.confidence, atlasTermAssignmentHeader.confidence) &&
        Objects.equals(this.status, atlasTermAssignmentHeader.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(termGuid, relationGuid, description, displayText, expression, createdBy, steward, source, confidence, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtlasTermAssignmentHeader {\n");
    
    sb.append("    termGuid: ").append(toIndentedString(termGuid)).append("\n");
    sb.append("    relationGuid: ").append(toIndentedString(relationGuid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    steward: ").append(toIndentedString(steward)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
