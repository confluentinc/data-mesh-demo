/*
 * Confluent Data Catalog
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.confluent.demo.datamesh.cc.datacatalog.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.confluent.demo.datamesh.cc.datacatalog.model.AtlasClassification;
import io.confluent.demo.datamesh.cc.datacatalog.model.AtlasTermAssignmentHeader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * AtlasEntityHeader
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-05T12:27:07.994303-05:00[America/Chicago]")
public class AtlasEntityHeader {
  @SerializedName("typeName")
  private String typeName = null;

  @SerializedName("attributes")
  private Map<String, Object> attributes = null;

  @SerializedName("guid")
  private String guid = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    DELETED("DELETED"),
    PURGED("PURGED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("displayText")
  private String displayText = null;

  @SerializedName("classificationNames")
  private List<String> classificationNames = null;

  @SerializedName("classifications")
  private List<AtlasClassification> classifications = null;

  @SerializedName("meaningNames")
  private List<String> meaningNames = null;

  @SerializedName("meanings")
  private List<AtlasTermAssignmentHeader> meanings = null;

  @SerializedName("isIncomplete")
  private Boolean isIncomplete = null;

  @SerializedName("labels")
  private List<String> labels = null;

  public AtlasEntityHeader typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @Schema(description = "")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public AtlasEntityHeader attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public AtlasEntityHeader putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String, Object>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @Schema(description = "")
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }

  public AtlasEntityHeader guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @Schema(description = "")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public AtlasEntityHeader status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public AtlasEntityHeader displayText(String displayText) {
    this.displayText = displayText;
    return this;
  }

   /**
   * Get displayText
   * @return displayText
  **/
  @Schema(description = "")
  public String getDisplayText() {
    return displayText;
  }

  public void setDisplayText(String displayText) {
    this.displayText = displayText;
  }

  public AtlasEntityHeader classificationNames(List<String> classificationNames) {
    this.classificationNames = classificationNames;
    return this;
  }

  public AtlasEntityHeader addClassificationNamesItem(String classificationNamesItem) {
    if (this.classificationNames == null) {
      this.classificationNames = new ArrayList<String>();
    }
    this.classificationNames.add(classificationNamesItem);
    return this;
  }

   /**
   * Get classificationNames
   * @return classificationNames
  **/
  @Schema(description = "")
  public List<String> getClassificationNames() {
    return classificationNames;
  }

  public void setClassificationNames(List<String> classificationNames) {
    this.classificationNames = classificationNames;
  }

  public AtlasEntityHeader classifications(List<AtlasClassification> classifications) {
    this.classifications = classifications;
    return this;
  }

  public AtlasEntityHeader addClassificationsItem(AtlasClassification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<AtlasClassification>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @Schema(description = "")
  public List<AtlasClassification> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<AtlasClassification> classifications) {
    this.classifications = classifications;
  }

  public AtlasEntityHeader meaningNames(List<String> meaningNames) {
    this.meaningNames = meaningNames;
    return this;
  }

  public AtlasEntityHeader addMeaningNamesItem(String meaningNamesItem) {
    if (this.meaningNames == null) {
      this.meaningNames = new ArrayList<String>();
    }
    this.meaningNames.add(meaningNamesItem);
    return this;
  }

   /**
   * Get meaningNames
   * @return meaningNames
  **/
  @Schema(description = "")
  public List<String> getMeaningNames() {
    return meaningNames;
  }

  public void setMeaningNames(List<String> meaningNames) {
    this.meaningNames = meaningNames;
  }

  public AtlasEntityHeader meanings(List<AtlasTermAssignmentHeader> meanings) {
    this.meanings = meanings;
    return this;
  }

  public AtlasEntityHeader addMeaningsItem(AtlasTermAssignmentHeader meaningsItem) {
    if (this.meanings == null) {
      this.meanings = new ArrayList<AtlasTermAssignmentHeader>();
    }
    this.meanings.add(meaningsItem);
    return this;
  }

   /**
   * Get meanings
   * @return meanings
  **/
  @Schema(description = "")
  public List<AtlasTermAssignmentHeader> getMeanings() {
    return meanings;
  }

  public void setMeanings(List<AtlasTermAssignmentHeader> meanings) {
    this.meanings = meanings;
  }

  public AtlasEntityHeader isIncomplete(Boolean isIncomplete) {
    this.isIncomplete = isIncomplete;
    return this;
  }

   /**
   * Get isIncomplete
   * @return isIncomplete
  **/
  @Schema(description = "")
  public Boolean isIsIncomplete() {
    return isIncomplete;
  }

  public void setIsIncomplete(Boolean isIncomplete) {
    this.isIncomplete = isIncomplete;
  }

  public AtlasEntityHeader labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public AtlasEntityHeader addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @Schema(description = "")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtlasEntityHeader atlasEntityHeader = (AtlasEntityHeader) o;
    return Objects.equals(this.typeName, atlasEntityHeader.typeName) &&
        Objects.equals(this.attributes, atlasEntityHeader.attributes) &&
        Objects.equals(this.guid, atlasEntityHeader.guid) &&
        Objects.equals(this.status, atlasEntityHeader.status) &&
        Objects.equals(this.displayText, atlasEntityHeader.displayText) &&
        Objects.equals(this.classificationNames, atlasEntityHeader.classificationNames) &&
        Objects.equals(this.classifications, atlasEntityHeader.classifications) &&
        Objects.equals(this.meaningNames, atlasEntityHeader.meaningNames) &&
        Objects.equals(this.meanings, atlasEntityHeader.meanings) &&
        Objects.equals(this.isIncomplete, atlasEntityHeader.isIncomplete) &&
        Objects.equals(this.labels, atlasEntityHeader.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeName, attributes, guid, status, displayText, classificationNames, classifications, meaningNames, meanings, isIncomplete, labels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtlasEntityHeader {\n");
    
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    classificationNames: ").append(toIndentedString(classificationNames)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    meaningNames: ").append(toIndentedString(meaningNames)).append("\n");
    sb.append("    meanings: ").append(toIndentedString(meanings)).append("\n");
    sb.append("    isIncomplete: ").append(toIndentedString(isIncomplete)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
