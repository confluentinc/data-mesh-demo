/*
 * Confluent Data Catalog
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.confluent.demo.datamesh.cc.datacatalog.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.confluent.demo.datamesh.cc.datacatalog.model.AtlasClassification;
import io.confluent.demo.datamesh.cc.datacatalog.model.AtlasTermAssignmentHeader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
// import org.threeten.bp.OffsetDateTime;
import java.time.OffsetDateTime;
/**
 * AtlasEntity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-05T12:27:07.994303-05:00[America/Chicago]")
public class AtlasEntity {
  @SerializedName("typeName")
  private String typeName = null;

  @SerializedName("attributes")
  private Map<String, Object> attributes = null;

  @SerializedName("guid")
  private String guid = null;

  @SerializedName("homeId")
  private String homeId = null;

  @SerializedName("isProxy")
  private Boolean isProxy = null;

  @SerializedName("isIncomplete")
  private Boolean isIncomplete = null;

  @SerializedName("provenanceType")
  private Integer provenanceType = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    DELETED("DELETED"),
    PURGED("PURGED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("updatedBy")
  private String updatedBy = null;

  @SerializedName("createTime")
  private OffsetDateTime createTime = null;

  @SerializedName("updateTime")
  private OffsetDateTime updateTime = null;

  @SerializedName("version")
  private Long version = null;

  @SerializedName("relationshipAttributes")
  private Map<String, Object> relationshipAttributes = null;

  @SerializedName("classifications")
  private List<AtlasClassification> classifications = null;

  @SerializedName("meanings")
  private List<AtlasTermAssignmentHeader> meanings = null;

  @SerializedName("customAttributes")
  private Map<String, String> customAttributes = null;

  @SerializedName("businessAttributes")
  private Map<String, Map<String, Object>> businessAttributes = null;

  @SerializedName("labels")
  private List<String> labels = null;

  @SerializedName("proxy")
  private Boolean proxy = null;

  public AtlasEntity typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @Schema(description = "")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public AtlasEntity attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public AtlasEntity putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String, Object>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @Schema(description = "")
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }

  public AtlasEntity guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @Schema(description = "")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public AtlasEntity homeId(String homeId) {
    this.homeId = homeId;
    return this;
  }

   /**
   * Get homeId
   * @return homeId
  **/
  @Schema(description = "")
  public String getHomeId() {
    return homeId;
  }

  public void setHomeId(String homeId) {
    this.homeId = homeId;
  }

  public AtlasEntity isProxy(Boolean isProxy) {
    this.isProxy = isProxy;
    return this;
  }

   /**
   * Get isProxy
   * @return isProxy
  **/
  @Schema(description = "")
  public Boolean isIsProxy() {
    return isProxy;
  }

  public void setIsProxy(Boolean isProxy) {
    this.isProxy = isProxy;
  }

  public AtlasEntity isIncomplete(Boolean isIncomplete) {
    this.isIncomplete = isIncomplete;
    return this;
  }

   /**
   * Get isIncomplete
   * @return isIncomplete
  **/
  @Schema(description = "")
  public Boolean isIsIncomplete() {
    return isIncomplete;
  }

  public void setIsIncomplete(Boolean isIncomplete) {
    this.isIncomplete = isIncomplete;
  }

  public AtlasEntity provenanceType(Integer provenanceType) {
    this.provenanceType = provenanceType;
    return this;
  }

   /**
   * Get provenanceType
   * @return provenanceType
  **/
  @Schema(description = "")
  public Integer getProvenanceType() {
    return provenanceType;
  }

  public void setProvenanceType(Integer provenanceType) {
    this.provenanceType = provenanceType;
  }

  public AtlasEntity status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public AtlasEntity createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public AtlasEntity updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @Schema(description = "")
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }

  public AtlasEntity createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }

  public AtlasEntity updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }

  public AtlasEntity version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }

  public AtlasEntity relationshipAttributes(Map<String, Object> relationshipAttributes) {
    this.relationshipAttributes = relationshipAttributes;
    return this;
  }

  public AtlasEntity putRelationshipAttributesItem(String key, Object relationshipAttributesItem) {
    if (this.relationshipAttributes == null) {
      this.relationshipAttributes = new HashMap<String, Object>();
    }
    this.relationshipAttributes.put(key, relationshipAttributesItem);
    return this;
  }

   /**
   * Get relationshipAttributes
   * @return relationshipAttributes
  **/
  @Schema(description = "")
  public Map<String, Object> getRelationshipAttributes() {
    return relationshipAttributes;
  }

  public void setRelationshipAttributes(Map<String, Object> relationshipAttributes) {
    this.relationshipAttributes = relationshipAttributes;
  }

  public AtlasEntity classifications(List<AtlasClassification> classifications) {
    this.classifications = classifications;
    return this;
  }

  public AtlasEntity addClassificationsItem(AtlasClassification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<AtlasClassification>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @Schema(description = "")
  public List<AtlasClassification> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<AtlasClassification> classifications) {
    this.classifications = classifications;
  }

  public AtlasEntity meanings(List<AtlasTermAssignmentHeader> meanings) {
    this.meanings = meanings;
    return this;
  }

  public AtlasEntity addMeaningsItem(AtlasTermAssignmentHeader meaningsItem) {
    if (this.meanings == null) {
      this.meanings = new ArrayList<AtlasTermAssignmentHeader>();
    }
    this.meanings.add(meaningsItem);
    return this;
  }

   /**
   * Get meanings
   * @return meanings
  **/
  @Schema(description = "")
  public List<AtlasTermAssignmentHeader> getMeanings() {
    return meanings;
  }

  public void setMeanings(List<AtlasTermAssignmentHeader> meanings) {
    this.meanings = meanings;
  }

  public AtlasEntity customAttributes(Map<String, String> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public AtlasEntity putCustomAttributesItem(String key, String customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new HashMap<String, String>();
    }
    this.customAttributes.put(key, customAttributesItem);
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @Schema(description = "")
  public Map<String, String> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(Map<String, String> customAttributes) {
    this.customAttributes = customAttributes;
  }

  public AtlasEntity businessAttributes(Map<String, Map<String, Object>> businessAttributes) {
    this.businessAttributes = businessAttributes;
    return this;
  }

  public AtlasEntity putBusinessAttributesItem(String key, Map<String, Object> businessAttributesItem) {
    if (this.businessAttributes == null) {
      this.businessAttributes = new HashMap<String, Map<String, Object>>();
    }
    this.businessAttributes.put(key, businessAttributesItem);
    return this;
  }

   /**
   * Get businessAttributes
   * @return businessAttributes
  **/
  @Schema(description = "")
  public Map<String, Map<String, Object>> getBusinessAttributes() {
    return businessAttributes;
  }

  public void setBusinessAttributes(Map<String, Map<String, Object>> businessAttributes) {
    this.businessAttributes = businessAttributes;
  }

  public AtlasEntity labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public AtlasEntity addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @Schema(description = "")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public AtlasEntity proxy(Boolean proxy) {
    this.proxy = proxy;
    return this;
  }

   /**
   * Get proxy
   * @return proxy
  **/
  @Schema(description = "")
  public Boolean isProxy() {
    return proxy;
  }

  public void setProxy(Boolean proxy) {
    this.proxy = proxy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtlasEntity atlasEntity = (AtlasEntity) o;
    return Objects.equals(this.typeName, atlasEntity.typeName) &&
        Objects.equals(this.attributes, atlasEntity.attributes) &&
        Objects.equals(this.guid, atlasEntity.guid) &&
        Objects.equals(this.homeId, atlasEntity.homeId) &&
        Objects.equals(this.isProxy, atlasEntity.isProxy) &&
        Objects.equals(this.isIncomplete, atlasEntity.isIncomplete) &&
        Objects.equals(this.provenanceType, atlasEntity.provenanceType) &&
        Objects.equals(this.status, atlasEntity.status) &&
        Objects.equals(this.createdBy, atlasEntity.createdBy) &&
        Objects.equals(this.updatedBy, atlasEntity.updatedBy) &&
        Objects.equals(this.createTime, atlasEntity.createTime) &&
        Objects.equals(this.updateTime, atlasEntity.updateTime) &&
        Objects.equals(this.version, atlasEntity.version) &&
        Objects.equals(this.relationshipAttributes, atlasEntity.relationshipAttributes) &&
        Objects.equals(this.classifications, atlasEntity.classifications) &&
        Objects.equals(this.meanings, atlasEntity.meanings) &&
        Objects.equals(this.customAttributes, atlasEntity.customAttributes) &&
        Objects.equals(this.businessAttributes, atlasEntity.businessAttributes) &&
        Objects.equals(this.labels, atlasEntity.labels) &&
        Objects.equals(this.proxy, atlasEntity.proxy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeName, attributes, guid, homeId, isProxy, isIncomplete, provenanceType, status, createdBy, updatedBy, createTime, updateTime, version, relationshipAttributes, classifications, meanings, customAttributes, businessAttributes, labels, proxy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtlasEntity {\n");
    
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    homeId: ").append(toIndentedString(homeId)).append("\n");
    sb.append("    isProxy: ").append(toIndentedString(isProxy)).append("\n");
    sb.append("    isIncomplete: ").append(toIndentedString(isIncomplete)).append("\n");
    sb.append("    provenanceType: ").append(toIndentedString(provenanceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    relationshipAttributes: ").append(toIndentedString(relationshipAttributes)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    meanings: ").append(toIndentedString(meanings)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    businessAttributes: ").append(toIndentedString(businessAttributes)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
